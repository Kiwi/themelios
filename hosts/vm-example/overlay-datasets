# this dataset overlay is only active if set in configuration.sh AND file exists.
datasets_create() {
    echo "Creating and mounting datasets in /mnt using overlay..."
    # / (root) datasets
    zfs create -o mountpoint=none -o canmount=off -o sync=always "$zfs_pool_name"/ROOT
    zfs create -o mountpoint=legacy -o canmount=on "$zfs_pool_name"/ROOT/nixos
    mount -t zfs "$zfs_pool_name"/ROOT/nixos /mnt
    zpool set bootfs="$zfs_pool_name"/ROOT/nixos "$zfs_pool_name"

    # for UEFI systems - create and mount /boot as ext4 (and uses mdadm if multi-disks)
    # this also mounts the EFI partition to /efi with a fat32 fs.
    [[ $uefi_install ]] && uefi_mkfs

    slash_nix_outside_root() {
        zfs create -o mountpoint=none -o canmount=off -o sync=always "$zfs_pool_name"/NIX
        zfs create -o mountpoint=legacy -o canmount=on "$zfs_pool_name"/NIX/nix
        mkdir /mnt/nix
        mount -t zfs "$zfs_pool_name"/NIX/nix /mnt/nix
    }
    [[ $zfs_dataset_slashnix_no_root == "true" ]] && slash_nix_outside_root

    mkdir -p /mnt/{home,tmp}

    # /home datasets
    zfs create -o mountpoint=none -o canmount=off "$zfs_pool_name"/HOME
    zfs create -o mountpoint=legacy -o canmount=on "$zfs_pool_name"/HOME/home
    mount -t zfs "$zfs_pool_name"/HOME/home /mnt/home

    # /tmp datasets
    zfs create -o mountpoint=none -o canmount=off "$zfs_pool_name"/TMP
    zfs create -o mountpoint=legacy -o canmount=on -o sync=disabled "$zfs_pool_name"/TMP/tmp
    mount -t zfs "$zfs_pool_name"/TMP/tmp /mnt/tmp

    # swap option
    create_zswap() {
        echo "Creating ZSWAP volume and turning on swap..."
        zfs create \
            -o primarycache=metadata \
            -o secondarycache=metadata \
            -o compression=zle \
            -o sync=always \
            -o logbias=throughput \
            -o com.sun:auto-snapshot=false \
            "$zfs_pool_name"/SWAP

        zfs create \
            -V "$zfs_swap_size" \
            -b "$(getconf PAGESIZE)" \
            "$zfs_pool_name"/SWAP/swap0

        mkswap -f /dev/zvol/"$zfs_pool_name"/SWAP/swap0
        swapon /dev/zvol/"$zfs_pool_name"/SWAP/swap0
    }
    [[ $zfs_make_swap == "true" ]] && create_zswap

    zfs_auto_snapshot() {
        for dataset in "${zfs_auto_snapshot[@]}"
        do
            echo "Setting property com.sun:auto-snapshot=true to ${dataset}..."
            zfs set com.sun:auto-snapshot=true "$dataset"
        done
    }
    zfs_auto_snapshot
}

datasets_create
